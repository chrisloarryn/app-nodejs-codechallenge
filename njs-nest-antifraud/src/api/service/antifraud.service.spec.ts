import { MessageCreateDTO, MessageUpdateDTO } from "@api/dto";
import { AntiFraudService } from "@api/service/antifraud.service";
import { ClientKafka } from "@nestjs/microservices";
import { Test, TestingModule } from "@nestjs/testing";
import { MessageStatusEnum } from "@source/enum";
import { EventPatternEnum } from "@source/enum/event-pattern.enum";

describe("AntifraudService", () => {
	let kafkaClient: ClientKafka;

	beforeEach(async () => {
		// mock kafka client
		const mockKafkaClient = {
			emit: jest.fn(),
		};

		const app: TestingModule = await Test.createTestingModule({
			providers: [
				{
					provide: ClientKafka,
					useValue: mockKafkaClient,
				},
			],
		}).compile();

		kafkaClient = app.get<ClientKafka>(ClientKafka);
	});

	describe("validateTransaction", () => {
		it("should return a response with status APPROVED when value is more than or equal to 1000", async () => {
			const service = new AntiFraudService(kafkaClient);
			const message = new MessageUpdateDTO({
				id: "1",
				status: MessageStatusEnum.PENDING,
				value: 1000,
			});
			const response = await service.validateTransaction(message);

			expect(response.status).toEqual(MessageStatusEnum.APPROVED);

			expect(kafkaClient.emit).toHaveBeenCalledWith(
				EventPatternEnum.TransactionUpdate,
				JSON.stringify(response),
			);
		});

		it("should return a response with status REJECTED when value is less than 1000", async () => {
			const service = new AntiFraudService(kafkaClient);
			const message = new MessageCreateDTO();
			message.id = "2";
			message.value = 999;
			const response = await service.validateTransaction(
				message as unknown as MessageUpdateDTO,
			);

			expect(response.status).toEqual(MessageStatusEnum.REJECTED);

			expect(kafkaClient.emit).toHaveBeenCalledWith(
				EventPatternEnum.TransactionUpdate,
				JSON.stringify(response),
			);
		});
	});

	describe("event", () => {
		// Generated by CodiumAI

		describe("AntiFraudService", () => {
			// Tests that validateTransaction method returns expected response for a valid input
			it("should return the expected response when given a valid input", () => {
				const service = new AntiFraudService(kafkaClient);
				const input = new MessageUpdateDTO({
					id: "123",
					status: "PENDING",
					value: 1000,
				});
				const expectedOutput = {
					id: "123",
					status: MessageStatusEnum.APPROVED,
					value: 1000,
				};
				const output = service.validateTransaction(input);
				expect(output).toEqual(expectedOutput);
			});

			// Tests that the clientKafka.emit method is called with the expected arguments
			it("should call clientKafka.emit with the expected arguments", () => {
				const emitMock = jest.fn();
				const service = new AntiFraudService({
					emit: emitMock,
				} as unknown as ClientKafka);
				const input = new MessageUpdateDTO({
					id: "123",
					status: "PENDING",
					value: 1000,
				});
				service.validateTransaction(input);
				expect(emitMock).toHaveBeenCalledWith(
					EventPatternEnum.TransactionUpdate,
					JSON.stringify({
						id: "123",
						status: MessageStatusEnum.APPROVED,
						value: 1000,
					}),
				);
			});

			// Tests that validateTransaction method returns expected response for a value less than 1000
			it("should return the expected response when given a value less than 1000", () => {
				const service = new AntiFraudService(kafkaClient);
				const input = new MessageUpdateDTO({
					id: "123",
					status: "PENDING",
					value: 999,
				});
				const expectedOutput = {
					id: "123",
					status: MessageStatusEnum.REJECTED,
					value: 999,
				};
				const output = service.validateTransaction(input);
				expect(output).toEqual(expectedOutput);
			});

			// Tests that validateTransaction method returns expected response for a value equal to 1000
			it("should return the expected response when given a value equal to 1000", () => {
				const service = new AntiFraudService(kafkaClient);
				const input = new MessageUpdateDTO({
					id: "123",
					status: "PENDING",
					value: 1000,
				});
				const expectedOutput = {
					id: "123",
					status: MessageStatusEnum.APPROVED,
					value: 1000,
				};
				const output = service.validateTransaction(input);
				expect(output).toEqual(expectedOutput);
			});

			// Tests that validateTransaction method returns expected response for a value greater than 1000
			it("should return the expected response when given a value greater than 1000", () => {
				const service = new AntiFraudService(kafkaClient);
				const input = new MessageUpdateDTO({
					id: "123",
					status: "PENDING",
					value: 1001,
				});
				const expectedOutput = {
					id: "123",
					status: MessageStatusEnum.APPROVED,
					value: 1001,
				};
				const output = service.validateTransaction(input);
				expect(output).toEqual(expectedOutput);
			});

			// Tests that the validateTransaction method returns the expected response when the event parameter is undefined
			it("should return the expected response when the event parameter is undefined", () => {
				const service = new AntiFraudService(kafkaClient);
				const input = undefined;
				const expectedOutput = {
					id: undefined,
					status: MessageStatusEnum.REJECTED,
					value: undefined,
				};
				const output = service.validateTransaction(input);
				expect(output).toEqual(expectedOutput);
			});
		});
	});
});
